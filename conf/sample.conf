[global] # required

#---------------------------------------------------------------------------------------------------
# Number of data points
#---------------------------------------------------------------------------------------------------

data_points = 100

#---------------------------------------------------------------------------------------------------
# Number of features
#---------------------------------------------------------------------------------------------------

features = 1

#---------------------------------------------------------------------------------------------------
# Feature Type
#---------------------------------------------------------------------------------------------------

feature_1_type = int32

# other available types are `binary` and `string`. For `string`s, UTF-8 is always used. For some
# data types, the specification has to contain its size (and in turn its range):
#
#   feature_1_type = binary(4)  # means there are two bits
#   feature_1_type = string(30) # 30 characters
#
# another type 'value_list' can also be used. This one takes its values from a list of predefined
# values which can be in a text file or literally given (see below). All values are considered of
# type string, with size being the longest string in the list of values.

#---------------------------------------------------------------------------------------------------
# Feature Values Distribution
#---------------------------------------------------------------------------------------------------

# one per argument above, with possible values being: uniform, gamma, beta, log-normal
feature_1_distribution = uniform

# for more than one, separate by commas; the num of elements has to match the num of features
#
#   feature_1_distribution = uniform
#   feature_2_distribution = gamma
#   feature_3_distribution = beta
#   feature_4_distribution = log-normal
#
# for non-uniform distributions, we need to specify the parameters
#
#   feature_2_shape = 0.2
#   feature_2_scale = 0.2
#   feature_3_p = 0.1
#   feature_3_q = 0.2

# For 'value_list' types, the distribution dictates the distribution of the values that are selected
# from the value_list every time a new value is generated. For example
#
#   feature_5_type         = value_list
#   feature_5_values_file  = 'foo.txt'  # a one-column file containing distinct values
#
#   feature_5_distribution = uniform    # or any of the others. A `roundrobin` distribution can be
#                                       # used, which just loops through the possible values
#                                       # incrementally
#
# a list of values can also be directly provided:
#
#   feature_5_values = 'val1, val2, ... , valn'
#
# this and 'feature_n_values_file' conflict, i.e. only one can be provided.

#---------------------------------------------------------------------------------------------------
# Feature correlation
#---------------------------------------------------------------------------------------------------

# TODO

#---------------------------------------------------------------------------------------------------
# Number of Label
#---------------------------------------------------------------------------------------------------

labels = 1

#---------------------------------------------------------------------------------------------------
# Type of Label
#---------------------------------------------------------------------------------------------------

# types allowed are binary, string and value_list (see 'Feature Type')
label_1_type = binary(1)

#---------------------------------------------------------------------------------------------------
# Labeling Distribution
#---------------------------------------------------------------------------------------------------

# labeling distribution can be pseudo-random, in which case the same configuration as in 'Feature
# Values Distribution' above applies:
#
#  label_1_distribution = uniform, gamma
#  ...
#  ...
#  etc

# an alternative is to have conditional labeling, where a file is specified which contains the
# condition that is applied to each feature:

label_1_distribution = conditional
label_1_parameter1 = dummyConditional
label_1_parameter2 = '{"arg1" : 43, "arg2" : 1, "arg3" : "whatup"}'

# In the above example, "nameOfConditionalLabeler" is a conditional that has to exist in the
# `datagenerator/conditionals.py` module, it must derive from `Conditional`.
#
# An example of conditional labeling:
#
#   def generate (features, labels, labelToGenerate):
#      if (features[0].value > 0 ) then:
#         features[0].label(0)
#      else:
#         features[0].label(1)
#
# A conditional labeler can access the number of features and their type (i.e. has access to the
# configuration). See sample conditional labelers in the `src/labelers` folder

#---------------------------------------------------------------------------------------------------
# Output
#---------------------------------------------------------------------------------------------------

output = csv
output_file = output.csv

# TODO parametrize the inclusion of header
